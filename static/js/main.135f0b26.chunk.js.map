{"version":3,"sources":["Context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/partials/TextInputField.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/partials/Header.js","components/about/About.js","components/http_reqs/FetchComp.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","con","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","setState","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","props","children","Component","Consumer","Contact","showContact","delContact","delete","_this2","_this$props$contact","name","email","phone","className","onClick","style","float","bind","Link","to","margin","Contacts","Fragment","contacts_Contact","TextInputField","_ref","label","placeholder","onchange","error","htmlFor","classnames","is-invalid","onChange","defaultProp","required","AddContact","errors","e","defineProperty","target","onAddContactSubmit","_this$state","newContact","addCon","preventDefault","abrupt","post","history","push","_this$state2","onSubmit","partials_TextInputField","EditContact","editedContact","match","params","put","Header","branding","href","defaultProps","protoTypes","PropTypes","string","isRequired","About","FetchComp","title","body","fetch","then","response","json","App","Context_Provider","HashRouter","partials_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.135f0b26.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"DELETE_CONTACT\":\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            }\r\n        case \"ADD_CONTACT\":\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n                // contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            }\r\n        case \"UPDATE_CONTACT\":\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(con => con.id === action.payload.id ? con = action.payload : con)\r\n            }\r\n        default:\r\n            return {state}\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n\r\n    async componentDidMount(){\r\n        const res = await axios\r\n            .get('https://jsonplaceholder.typicode.com/users');\r\n\r\n        this.setState({\r\n            contacts: res.data\r\n        })\r\n    }\r\n    state = {\r\n        // contacts: [{\r\n        //         id: 1,\r\n        //         name: 'Junaid Amin',\r\n        //         email: 'junaidameen2009@gmail.com',\r\n        //         phone: '1234566777'\r\n        //     },\r\n        //     {\r\n        //         id: 2,\r\n        //         name: 'Dianuj Nima',\r\n        //         email: 'info@dianujnima.com',\r\n        //         phone: '12123312312'\r\n        //     },\r\n        //     {\r\n        //         id: 4,\r\n        //         name: 'John Doe',\r\n        //         email: 'info@johndoe.com',\r\n        //         phone: '4235849023'\r\n        //     },\r\n        //     {\r\n        //         id: 5,\r\n        //         name: 'Jane Doe',\r\n        //         email: 'info@janedoe.com',\r\n        //         phone: '4433322122'\r\n        //     }\r\n        // ],\r\n        contacts: [],\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action))\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Consumer} from './../../Context';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nclass Contact extends Component {\r\n  state = {\r\n    showContact: false\r\n  }\r\n  delContact = async (id, dispatch) => {\r\n    // this.props.delClickedHandler();\r\n    await axios.delete('https://jsonplaceholder.typicode.com/users/'+id);\r\n    \r\n    dispatch({\r\n      type: 'DELETE_CONTACT',\r\n      payload: id\r\n    });\r\n\r\n  }\r\n  render() {\r\n    const {id, name, email, phone} = this.props.contact;\r\n    const showContact = this.state.showContact;\r\n    return (\r\n        <Consumer>\r\n            {value => {\r\n                const {dispatch} = value;\r\n                return(\r\n                    <div className=\"card-body mb-1\">\r\n                      <h4>\r\n                        { name }{' '}\r\n                        <i className=\"link fa fa-sort-down\" onClick={\r\n                          () => this.setState({showContact: !this.state.showContact})\r\n                        }></i>\r\n                        <i className=\"fa fa-times text-danger link\" \r\n                          style={{ float: 'right'  }}\r\n                          onClick={this.delContact.bind(this, id, dispatch)}>\r\n                        </i>\r\n                        <Link to={`edit_contact/${id}`}>\r\n                          <i className=\"fa fa-pencil text-warning link\" \r\n                            style={{ float: 'right', margin: '0 10px'  }}\r\n                            onClick={this.delContact.bind(this, id, dispatch)}>\r\n                          </i>\r\n                        </Link>\r\n                      </h4>\r\n                      {showContact ? (<ul className=\"list-group\">\r\n                            <li className=\"list-group-item\">Email: { email }</li>\r\n                            <li className=\"list-group-item\">Phone: { phone }</li>\r\n                        </ul>): null}\r\n                    </div>\r\n                )\r\n            }}\r\n        </Consumer>\r\n    )\r\n    // return (\r\n    //   <div className=\"card-body mb-1\">\r\n    //     <h4>\r\n    //       { name }{' '}\r\n    //       <i className=\"link fa fa-sort-down\" onClick={\r\n    //         () => this.setState({showContact: !this.state.showContact})\r\n    //       }></i>\r\n    //       <i className=\"fa fa-times text-danger link\" \r\n    //         style={{ float: 'right'  }}\r\n    //         onClick={this.delContact}>\r\n    //       </i>\r\n    //     </h4>\r\n    //     {showContact ? (<ul className=\"list-group\">\r\n    //           <li className=\"list-group-item\">Email: { email }</li>\r\n    //           <li className=\"list-group-item\">Phone: { phone }</li>\r\n    //       </ul>): null}\r\n    //   </div>\r\n    // )\r\n  }\r\n}\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.object.isRequired,\r\n  // delClickedHandler: PropTypes.func.isRequired\r\n}\r\nexport default Contact;","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport {Consumer} from './../../Context';\r\n\r\nclass Contacts extends Component {\r\n    // deleteContact = id => {\r\n    //     const {contacts} = this.state;\r\n    //     const newContacts = contacts.filter(contact => contact.id !== id);\r\n    //     this.setState({\r\n    //         contacts: newContacts\r\n    //     })\r\n    // }\r\n  render() {\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {contacts} = value;\r\n                    return(\r\n                        <React.Fragment>\r\n                            <h2 className=\"display-4\"><span className=\"text-success\">All</span> Contacts!</h2>\r\n                            <hr className=\"my-4\" />\r\n                            {contacts.map(contact => (\r\n                                <Contact key={contact.id} contact={contact}/>\r\n                            ))}\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    // const {contacts} = this.state;\r\n    // return (\r\n    //   <React.Fragment>\r\n    //       {contacts.map(contact => (\r\n    //           <Contact key={contact.id} contact={contact} delClickedHandler={this.deleteContact.bind(this,contact.id)}/>\r\n    //       ))}\r\n    //   </React.Fragment>\r\n    // )\r\n  }\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n\r\nconst TextInputField = ({label, name, value, placeholder, onchange, type, error}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                type={type}\r\n                id={name}\r\n                name={name}\r\n                className={classnames(\"form-control\", {\r\n                    'is-invalid': error\r\n                })}\r\n                placeholder={placeholder}\r\n                onChange={onchange}\r\n                value={value}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div> }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nTextInputField.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    onchange: PropTypes.func.isRequired,\r\n    type: PropTypes.string,\r\n    error: PropTypes.string,\r\n}\r\n\r\nTextInputField.defaultProp = {\r\n    type: \"text\",\r\n    required: false\r\n}\r\n\r\nexport default TextInputField","import React, { Component } from 'react';\r\nimport {Consumer} from './../../Context';\r\nimport TextInputField from './../partials/TextInputField';\r\n// import uuid from 'uuid';\r\nimport axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value});\r\n\r\n    onAddContactSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        // dispatch\r\n        const {name, email, phone} = this.state;\r\n\r\n        //check errors\r\n        if(name === \"\"){\r\n            this.setState({\r\n                errors: {\r\n                    name: \"Name is required\"\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        \r\n        if(email === ''){\r\n            this.setState({\r\n                errors: {\r\n                    email: \"Email is required\"\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        \r\n        if(phone === ''){\r\n            this.setState({\r\n                errors: {\r\n                    phone: \"Phone is required\"\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        \r\n        const newContact = {\r\n            // id: uuid(),\r\n            name: this.state.name,\r\n            email: this.state.email,\r\n            phone: this.state.phone,\r\n        };\r\n        \r\n        const addCon = await axios.post('https://jsonplaceholder.typicode.com/users/', newContact);\r\n        dispatch({\r\n            type: 'ADD_CONTACT',\r\n            payload: addCon.data\r\n        });\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        })\r\n\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n        return(\r\n            <React.Fragment>\r\n                <h2 className=\"display-4\"><span className=\"text-success\">Add</span> Contact!</h2>\r\n                <hr className=\"my-4\" />\r\n                <Consumer>\r\n                    {value => {\r\n                        const {dispatch} = value;\r\n                        return (\r\n                            <div className=\"card mb-4\">\r\n                                <div className=\"card-header\">Add Contact</div>\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={this.onAddContactSubmit.bind(this, dispatch)}>\r\n                                        <TextInputField \r\n                                            label=\"Name\" \r\n                                            name=\"name\" \r\n                                            value={name} \r\n                                            placeholder=\"Enter Name\" \r\n                                            onchange={this.onChange}\r\n                                            error={errors.name}\r\n                                            required\r\n                                        />\r\n                                        <TextInputField \r\n                                            label=\"Email\" \r\n                                            name=\"email\" \r\n                                            value={email}\r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter Email\" \r\n                                            onchange={this.onChange}\r\n                                            error={errors.email}\r\n                                            required\r\n                                        />\r\n                                        <TextInputField \r\n                                            label=\"Phone\" \r\n                                            name=\"phone\" \r\n                                            value={phone}\r\n                                            type=\"phone\"\r\n                                            placeholder=\"Enter Phone\" \r\n                                            onchange={this.onChange}\r\n                                            error={errors.phone}\r\n                                            required\r\n                                        />\r\n                                        <button className=\"btn btn-block btn-success\">Add Contact</button>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }}\r\n                </Consumer>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddContact","import React, { Component } from 'react';\r\nimport {Consumer} from './../../Context';\r\nimport TextInputField from './../partials/TextInputField';\r\nimport axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const {id} = this.props.match.params;\r\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users/' + id);\r\n        const contact = res.data;\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        })\r\n    }\r\n\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value});\r\n\r\n    onAddContactSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        // dispatch\r\n        const {name, email, phone} = this.state;\r\n\r\n        //check errors\r\n        if(name === \"\"){\r\n            this.setState({\r\n                errors: {\r\n                    name: \"Name is required\"\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        \r\n        if(email === ''){\r\n            this.setState({\r\n                errors: {\r\n                    email: \"Email is required\"\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        \r\n        if(phone === ''){\r\n            this.setState({\r\n                errors: {\r\n                    phone: \"Phone is required\"\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        \r\n        const editedContact = {\r\n            name: this.state.name,\r\n            email: this.state.email,\r\n            phone: this.state.phone,\r\n        };\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, editedContact);\r\n        dispatch({\r\n            type: 'UPDATE_CONTACT',\r\n            payload: res.data\r\n        });\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        })\r\n\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n        return(\r\n            <React.Fragment>\r\n                <h2 className=\"display-4\"><span className=\"text-success\">Update</span> Contact!</h2>\r\n                <hr className=\"my-4\" />\r\n                <Consumer>\r\n                    {value => {\r\n                        const {dispatch} = value;\r\n                        return (\r\n                            <div className=\"card mb-4\">\r\n                                <div className=\"card-header\">Add Contact</div>\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={this.onAddContactSubmit.bind(this, dispatch)}>\r\n                                        <TextInputField \r\n                                            label=\"Name\" \r\n                                            name=\"name\" \r\n                                            value={name} \r\n                                            placeholder=\"Enter Name\" \r\n                                            onchange={this.onChange}\r\n                                            error={errors.name}\r\n                                            required\r\n                                        />\r\n                                        <TextInputField \r\n                                            label=\"Email\" \r\n                                            name=\"email\" \r\n                                            value={email}\r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter Email\" \r\n                                            onchange={this.onChange}\r\n                                            error={errors.email}\r\n                                            required\r\n                                        />\r\n                                        <TextInputField \r\n                                            label=\"Phone\" \r\n                                            name=\"phone\" \r\n                                            value={phone}\r\n                                            type=\"phone\"\r\n                                            placeholder=\"Enter Phone\" \r\n                                            onchange={this.onChange}\r\n                                            error={errors.phone}\r\n                                            required\r\n                                        />\r\n                                        <button className=\"btn btn-block btn-success\">Update Contact</button>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }}\r\n                </Consumer>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditContact","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    const branding = this.props.branding;\r\n    return (\r\n      <div>\r\n          <nav className=\"navbar navbar-dark bg-success navbar-expand-sm mb-3\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {branding}\r\n                </a>\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\">\r\n                        <Link  to=\"/\" className=\"nav-link\">\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/add_contact\" className=\"nav-link\">\r\n                            Add Contact\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/about\" className=\"nav-link\">\r\n                            About\r\n                        </Link>\r\n                    </li>\r\n\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/getReq\" className=\"nav-link\">\r\n                            Get Request\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n          </nav>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nHeader.defaultProps = {\r\n    branding: \"My App\"\r\n}\r\n\r\nHeader.protoTypes = {\r\n    branding: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n            <h2 className=\"display-4\"><span className=\"text-success\">About</span> App</h2>\r\n            <p className=\"lead\">This is a simple app to control your contacts.</p>\r\n            <hr className=\"my-4\" />\r\n            <p className=\"text-secondary\">Version 0.02</p>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default About","import React, { Component } from 'react';\r\n\r\nclass FetchComp extends Component {\r\n    state = {\r\n        title: '',\r\n        body: ''\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/posts/1')\r\n            .then(response => response.json())\r\n            .then(json => this.setState({title: json.title, body: json.body}))\r\n    }\r\n    render(){\r\n        const {title, body} = this.state;\r\n        return (\r\n          <div>\r\n            <h1>{title}</h1>\r\n            <p>{body}</p>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FetchComp","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\n//Provider\nimport {Provider} from './Context';\n\n//Components\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/partials/Header';\nimport About from './components/about/About';\nimport FetchComp from './components/http_reqs/FetchComp';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n            <Header branding=\"Project Manager\"/>\n            <div className=\"container\">\n              <Switch>\n                  <Route exact path=\"/\" component={Contacts} />\n                  <Route exact path=\"/add_contact\" component={AddContact} />\n                  <Route exact path=\"/edit_contact/:id\" component={EditContact} />\n                  <Route exact path=\"/about\" component={About} />\n                  <Route exact path=\"/getReq\" component={FetchComp} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}